import{_ as y,C as c,c as o,o as e,a2 as i,j as s,a,G as l,w as t}from"./chunks/framework.D30IVGRC.js";const F="/assets/image-28.C7fbkkS0.png",D="/assets/image-29.C5pQEf9Q.png",d="/assets/image-30.BpwHVKAM.png",m="/assets/image-31.B5CqnI8v.png",v=JSON.parse('{"title":"数组","description":"","frontmatter":{"layout":"doc","title":"数组","editLink":true},"headers":[],"relativePath":"python/data_structure/array.md","filePath":"python/data_structure/array.md"}'),u={name:"python/data_structure/array.md"},T={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.618ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2041 1000","aria-hidden":"true"},Q={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},b={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},h={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},B={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.618ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2041 1000","aria-hidden":"true"};function f(A,n,x,g,w,E){const p=c("mjx-assistive-mml"),r=c("mjx-container");return e(),o("div",null,[n[24]||(n[24]=i('<h1 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h1><p>数组（array）是一种线性数据结构，其将相同类型的元素存储在连续的内存空间中。我们将元素在数组中的位置称为该元素的索引（index）。</p><p><img src="'+F+`" alt="数组定义与存储方式"></p><h2 id="数组常用操作" tabindex="-1">数组常用操作 <a class="header-anchor" href="#数组常用操作" aria-label="Permalink to &quot;数组常用操作&quot;">​</a></h2><h3 id="初始化数组" tabindex="-1">初始化数组 <a class="header-anchor" href="#初始化数组" aria-label="Permalink to &quot;初始化数组&quot;">​</a></h3><p>我们可以根据需求选用数组的两种初始化方式：无初始值、给定初始值。在未指定初始值的情况下，大多数编程语言会将数组元素初始化为0.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 初始化数组</span></span>
<span class="line"><span style="color:#BABED8;">arr</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> list</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 5</span><span style="color:#676E95;font-style:italic;">  # [ 0, 0, 0, 0, 0 ]</span></span>
<span class="line"><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> list</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="访问元素" tabindex="-1">访问元素 <a class="header-anchor" href="#访问元素" aria-label="Permalink to &quot;访问元素&quot;">​</a></h3><p>数组元素被存储在连续的内存空间中，这意味着计算数组元素的内存地址非常容易。给定数组内存地址（首元素内存地址）和某个元素的索引，我们可以使用下图所示的公式计算得到该元素的内存地址，从而直接访问该元素。</p><p><img src="`+D+'" alt="数组元素的内存地址计算"></p><p>我们发现数组首个元素的索引为 0 ，这似乎有些反直觉，因为从 1开始计数会更自然。但从地址计算公式的角度看，索引本质上是内存地址的偏移量。首个元素的地址偏移量是 0 ，因此它的索引为 0 是合理的。</p>',11)),s("p",null,[n[2]||(n[2]=a("在数组中访问元素非常高效，我们可以在 ")),l(r,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:t(()=>[(e(),o("svg",T,n[0]||(n[0]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z",style:{"stroke-width":"3"}})]),s("g",{"data-mml-node":"mo",transform:"translate(763,0)"},[s("path",{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",style:{"stroke-width":"3"}})]),s("g",{"data-mml-node":"mn",transform:"translate(1152,0)"},[s("path",{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",style:{"stroke-width":"3"}})]),s("g",{"data-mml-node":"mo",transform:"translate(1652,0)"},[s("path",{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",style:{"stroke-width":"3"}})])])],-1)]))),l(p,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:t(()=>n[1]||(n[1]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")],-1)])),_:1})]),_:1}),n[3]||(n[3]=a(" 时间内随机访问数组中的任意一个元素。"))]),n[25]||(n[25]=i(`<div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#82AAFF;"> random_access</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">nums</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> list</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">])</span><span style="color:#89DDFF;"> -&gt;</span><span style="color:#FFCB6B;"> int</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    &quot;&quot;&quot;</span><span style="color:#676E95;font-style:italic;">随机访问元素</span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # 在区间 [0, len(nums)-1] 中随机抽取一个数字</span></span>
<span class="line"><span style="color:#BABED8;">    random_index </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> random</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">randint</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">nums</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # 获取并返回随机元素</span></span>
<span class="line"><span style="color:#BABED8;">    random_num </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">random_index</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> random_num</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="插入元素" tabindex="-1">插入元素 <a class="header-anchor" href="#插入元素" aria-label="Permalink to &quot;插入元素&quot;">​</a></h3><p>数组元素在内存中是“紧挨着的”，它们之间没有空间再存放任何数据。如图所示，如果想在数组中间插入一个元素，则需要将该元素之后的所有元素都向后移动一位，之后再把元素赋值给该索引。</p><p><img src="`+d+`" alt="数组插入元素示例"></p><p>值得注意的是，由于数组的长度是固定的，因此插入一个元素必定会导致数组尾部元素“丢失”。我们将这个问题的解决方案留在“列表”章节中讨论。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#82AAFF;"> insert</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">nums</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> list</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">],</span><span style="color:#BABED8;font-style:italic;"> num</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> int</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> index</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> int</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    &quot;&quot;&quot;</span><span style="color:#676E95;font-style:italic;">在数组的索引 index 处插入元素 num</span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # 把索引 index 以及之后的所有元素向后移动一位</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#82AAFF;"> range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">nums</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> index</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">        nums</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">i </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # 将 num 赋给 index 处的元素</span></span>
<span class="line"><span style="color:#BABED8;">    nums</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> num</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="删除元素" tabindex="-1">删除元素 <a class="header-anchor" href="#删除元素" aria-label="Permalink to &quot;删除元素&quot;">​</a></h3><p>同理，如图所示，若想删除索引 i 处的元素，则需要把索引 i之后的元素都向前移动一位。</p><p><img src="`+m+`" alt="数组删除元素示例"></p><p>请注意，删除元素完成后，原先末尾的元素变得“无意义”了，所以我们无须特意去修改它。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#82AAFF;"> remove</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">nums</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> list</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">],</span><span style="color:#BABED8;font-style:italic;"> index</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> int</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    &quot;&quot;&quot;</span><span style="color:#676E95;font-style:italic;">删除索引 index 处的元素</span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # 把索引 index 之后的所有元素向前移动一位</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#82AAFF;"> range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">index</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">nums</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">        nums</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">i </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>总的来看，数组的插入与删除操作有以下缺点。</p>`,12)),s("ul",null,[s("li",null,[n[8]||(n[8]=a("时间复杂度高：数组的插入和删除的平均时间复杂度均为 ")),l(r,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:t(()=>[(e(),o("svg",Q,n[4]||(n[4]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z",style:{"stroke-width":"3"}})]),s("g",{"data-mml-node":"mo",transform:"translate(763,0)"},[s("path",{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",style:{"stroke-width":"3"}})]),s("g",{"data-mml-node":"mi",transform:"translate(1152,0)"},[s("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})]),s("g",{"data-mml-node":"mo",transform:"translate(1752,0)"},[s("path",{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",style:{"stroke-width":"3"}})])])],-1)]))),l(p,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:t(()=>n[5]||(n[5]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")],-1)])),_:1})]),_:1}),n[9]||(n[9]=a(" ，其中 ")),l(r,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:t(()=>[(e(),o("svg",b,n[6]||(n[6]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1)]))),l(p,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:t(()=>n[7]||(n[7]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"n")],-1)])),_:1})]),_:1}),n[10]||(n[10]=a("为数组长度。"))]),n[11]||(n[11]=s("li",null,"丢失元素：由于数组的长度不可变，因此在插入元素后，超出数组长度范围的元素会丢失。",-1)),n[12]||(n[12]=s("li",null,"内存浪费：我们可以初始化一个比较长的数组，只用前面一部分，这样在插入数据时，丢失的末尾元素都是“无意义”的，但这样做会造成部分内存空间浪费。",-1))]),n[26]||(n[26]=i(`<h3 id="遍历数组" tabindex="-1">遍历数组 <a class="header-anchor" href="#遍历数组" aria-label="Permalink to &quot;遍历数组&quot;">​</a></h3><p>在大多数编程语言中，我们既可以通过索引遍历数组，也可以直接遍历获取数组中的每个元素：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#82AAFF;"> traverse</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">nums</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> list</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">]):</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    &quot;&quot;&quot;</span><span style="color:#676E95;font-style:italic;">遍历数组</span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    count </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # 通过索引遍历数组</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#82AAFF;"> range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">nums</span><span style="color:#89DDFF;">)):</span></span>
<span class="line"><span style="color:#BABED8;">        count </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # 直接遍历数组元素</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#BABED8;"> num </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        count </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> num</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # 同时遍历数据索引和元素</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> num </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#82AAFF;"> enumerate</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">nums</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">        count </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#BABED8;">        count </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> num</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="查找元素" tabindex="-1">查找元素 <a class="header-anchor" href="#查找元素" aria-label="Permalink to &quot;查找元素&quot;">​</a></h3><p>在数组中查找指定元素需要遍历数组，每轮判断元素值是否匹配，若匹配则输出对应索引。</p><p>因为数组是线性数据结构，所以上述查找操作被称为“线性查找”。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#82AAFF;"> find</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">nums</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> list</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">],</span><span style="color:#BABED8;font-style:italic;"> target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> int</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> -&gt;</span><span style="color:#FFCB6B;"> int</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    &quot;&quot;&quot;</span><span style="color:#676E95;font-style:italic;">在数组中查找指定元素</span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#82AAFF;"> range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">nums</span><span style="color:#89DDFF;">)):</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> ==</span><span style="color:#BABED8;"> target</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            return</span><span style="color:#BABED8;"> i</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="扩容数组" tabindex="-1">扩容数组 <a class="header-anchor" href="#扩容数组" aria-label="Permalink to &quot;扩容数组&quot;">​</a></h3><p>在复杂的系统环境中，程序难以保证数组之后的内存空间是可用的，从而无法安全地扩展数组容量。因此在大多数编程语言中，数组的长度是不可变的。</p>`,9)),s("p",null,[n[15]||(n[15]=a("如果我们希望扩容数组，则需重新建立一个更大的数组，然后把原数组元素依次复制到新数组。这是一个 ")),l(r,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:t(()=>[(e(),o("svg",h,n[13]||(n[13]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z",style:{"stroke-width":"3"}})]),s("g",{"data-mml-node":"mo",transform:"translate(763,0)"},[s("path",{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",style:{"stroke-width":"3"}})]),s("g",{"data-mml-node":"mi",transform:"translate(1152,0)"},[s("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})]),s("g",{"data-mml-node":"mo",transform:"translate(1752,0)"},[s("path",{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",style:{"stroke-width":"3"}})])])],-1)]))),l(p,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:t(()=>n[14]||(n[14]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")],-1)])),_:1})]),_:1}),n[16]||(n[16]=a("的操作，在数组很大的情况下非常耗时。代码如下所示："))]),n[27]||(n[27]=i(`<div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#82AAFF;"> extend</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">nums</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> list</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">],</span><span style="color:#BABED8;font-style:italic;"> enlarge</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> int</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> -&gt;</span><span style="color:#BABED8;"> list</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    &quot;&quot;&quot;</span><span style="color:#676E95;font-style:italic;">扩展数组长度</span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # 初始化一个扩展长度后的数组</span></span>
<span class="line"><span style="color:#BABED8;">    res </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> *</span><span style="color:#89DDFF;"> (</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">nums</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> enlarge</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # 将原数组中的所有元素复制到新数组</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#82AAFF;"> range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">nums</span><span style="color:#89DDFF;">)):</span></span>
<span class="line"><span style="color:#BABED8;">        res</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # 返回扩展后的新数组</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> res</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="数组的优点与局限性" tabindex="-1">数组的优点与局限性 <a class="header-anchor" href="#数组的优点与局限性" aria-label="Permalink to &quot;数组的优点与局限性&quot;">​</a></h2><p>数组存储在连续的内存空间内，且元素类型相同。这种做法包含丰富的先验信息，系统可以利用这些信息来优化数据结构的操作效率。</p>`,3)),s("ul",null,[n[22]||(n[22]=s("li",null,[s("strong",null,"空间效率高"),a("：数组为数据分配了连续的内存块，无须额外的结构开销。")],-1)),s("li",null,[n[19]||(n[19]=s("strong",null,"支持随机访问",-1)),n[20]||(n[20]=a("：数组允许在 ")),l(r,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:t(()=>[(e(),o("svg",B,n[17]||(n[17]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z",style:{"stroke-width":"3"}})]),s("g",{"data-mml-node":"mo",transform:"translate(763,0)"},[s("path",{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",style:{"stroke-width":"3"}})]),s("g",{"data-mml-node":"mn",transform:"translate(1152,0)"},[s("path",{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",style:{"stroke-width":"3"}})]),s("g",{"data-mml-node":"mo",transform:"translate(1652,0)"},[s("path",{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",style:{"stroke-width":"3"}})])])],-1)]))),l(p,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:t(()=>n[18]||(n[18]=[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")],-1)])),_:1})]),_:1}),n[21]||(n[21]=a("时间内访问任何元素。"))]),n[23]||(n[23]=s("li",null,[s("strong",null,"缓存局部性"),a("：当访问数组元素时，计算机不仅会加载它，还会缓存其周围的其他数据，从而借助高速缓存来提升后续操作的执行速度。")],-1))]),n[28]||(n[28]=i('<p>连续空间存储是一把双刃剑，其存在以下局限性。</p><ul><li><strong>插入与删除效率低</strong>：当数组中元素较多时，插入与删除操作需要移动大量的元素。</li><li><strong>长度不可变</strong>：数组在初始化后长度就固定了，扩容数组需要将所有数据复制到新数组，开销很大。</li><li><strong>空间浪费</strong>：如果数组分配的大小超过实际所需，那么多余的空间就被浪费了。</li></ul><h2 id="数组典型应用" tabindex="-1">数组典型应用 <a class="header-anchor" href="#数组典型应用" aria-label="Permalink to &quot;数组典型应用&quot;">​</a></h2><p>数组是一种基础且常见的数据结构，既频繁应用在各类算法之中，也可用于实现各种复杂数据结构。</p><ul><li><strong>随机访问</strong>：如果我们想随机抽取一些样本，那么可以用数组存储，并生成一个随机序列，根据索引实现随机抽样。</li><li><strong>排序和搜索</strong>：数组是排序和搜索算法最常用的数据结构。快速排序、归并排序、二分查找等都主要在数组上进行。</li><li><strong>查找表</strong>：当需要快速查找一个元素或其对应关系时，可以使用数组作为查找表。假如我们想实现字符到 ASCII 码的映射，则可以将字符的 ASCII 码值作为索引，对应的元素存放在数组中的对应位置。</li><li><strong>机器学习</strong>：神经网络中大量使用了向量、矩阵、张量之间的线性代数运算，这些数据都是以数组的形式构建的。数组是神经网络编程中最常使用的数据结构。</li><li><strong>数据结构实现</strong>：数组可以用于实现栈、队列、哈希表、堆、图等数据结构。例如，图的邻接矩阵表示实际上是一个二维数组。</li></ul>',5))])}const k=y(u,[["render",f]]);export{v as __pageData,k as default};

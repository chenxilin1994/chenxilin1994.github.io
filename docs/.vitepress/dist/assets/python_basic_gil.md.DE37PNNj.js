import{_ as n,c as a,o as l,a2 as p}from"./chunks/framework.D30IVGRC.js";const y=JSON.parse('{"title":"Python全局解释器锁","description":"","frontmatter":{"layout":"doc","title":"Python全局解释器锁","editLink":true},"headers":[],"relativePath":"python/basic/gil.md","filePath":"python/basic/gil.md"}'),o={name:"python/basic/gil.md"};function e(t,s,r,c,F,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="python全局解释器锁" tabindex="-1">Python全局解释器锁 <a class="header-anchor" href="#python全局解释器锁" aria-label="Permalink to &quot;Python全局解释器锁&quot;">​</a></h1><h2 id="_1-什么是gil-全局解释器锁" tabindex="-1">1. 什么是GIL(全局解释器锁) <a class="header-anchor" href="#_1-什么是gil-全局解释器锁" aria-label="Permalink to &quot;1. 什么是GIL(全局解释器锁)&quot;">​</a></h2><p>Global Interperter Lock是CPython解释器（Python官方实现）中的一个机制，同一时刻仅有一个线程能执行Python字节码（即占用解释器），即使存在多核CPU</p><h2 id="_2-为什么cpython需要gil" tabindex="-1">2. 为什么CPython需要GIL <a class="header-anchor" href="#_2-为什么cpython需要gil" aria-label="Permalink to &quot;2. 为什么CPython需要GIL&quot;">​</a></h2><p>历史背景：Python诞生于多核CPU普及之前，设计时优先考虑单线程简单性。</p><p>内存管理安全：Python使用引用计数来进行内存管理，当引用计数为0时，销毁内存。GIL可以防止多个线程同时修改引用计数导致内存泄漏/错误</p><h2 id="_3-gil的优缺点" tabindex="-1">3. GIL的优缺点 <a class="header-anchor" href="#_3-gil的优缺点" aria-label="Permalink to &quot;3. GIL的优缺点&quot;">​</a></h2><ul><li>优点： <ul><li>简化CPython的实现，保障单线程的性能</li><li>避免竞争条件，提高非并行代码的安全性</li></ul></li><li>缺点： <ul><li>CPU密集型多线程无法利用多核（比如计算圆周率）</li><li>多线程在并行计算中性能甚至不如单线程（因为切换线程有开销）</li></ul></li></ul><h2 id="_4-gil的工作机制" tabindex="-1">4. GIL的工作机制 <a class="header-anchor" href="#_4-gil的工作机制" aria-label="Permalink to &quot;4. GIL的工作机制&quot;">​</a></h2><p>每个线程在执行前需要获取GIL，执行一定量的字节码（比如100条）或遇到IO操作时释放。可以通过sys.setswitchintervel()来调整切换间隔</p><p>GIL确保信号处理函数不会被并发执行</p><h2 id="_5-如何规避gil的限制" tabindex="-1">5. 如何规避GIL的限制？ <a class="header-anchor" href="#_5-如何规避gil的限制" aria-label="Permalink to &quot;5. 如何规避GIL的限制？&quot;">​</a></h2><ol><li>使用多进程来代替多线程，每个进程独立GIL</li><li>在C扩展中手动释放GIL</li><li>使用其他解释器如Jython、IronPython，但生态受限</li><li>异步编程：asyncio在IO密集任务中高效（无线程切换成本）</li><li>混合编程：将计算密集的部分用其他语言（C C++ Rust）高效实现，用Python调用。</li></ol><h2 id="_6-gil会被移除吗" tabindex="-1">6. GIL会被移除吗？ <a class="header-anchor" href="#_6-gil会被移除吗" aria-label="Permalink to &quot;6. GIL会被移除吗？&quot;">​</a></h2><p>官方态度：短期内不会（涉及大量C扩展兼容性问题），但长期探索（如“nogil”项目）。</p><p>PEP 703：Python 3.12引入可选GIL模式（需编译时启用，尚未默认支持）。</p><p>权衡：移除GIL可能降低单线程性能（需更细粒度锁），需社区共识。</p><h2 id="_7-举例说明gil的影响" tabindex="-1">7. 举例说明GIL的影响 <a class="header-anchor" href="#_7-举例说明gil的影响" aria-label="Permalink to &quot;7. 举例说明GIL的影响&quot;">​</a></h2><p>CPU密集型，多线程甚至不如单线程，因为存在线程切换 IO密集型，可以用多线程，因为在文件读写 网络等待时会释放GIL，去执行其他线程的任务</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> multiprocessing </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Process</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> threading </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Thread</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#82AAFF;"> count</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">n</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    while</span><span style="color:#BABED8;"> n </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        n </span><span style="color:#89DDFF;">-=</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> __name__ </span><span style="color:#89DDFF;">==</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">__main__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#82AAFF;">    print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # 多线程（受GIL影响）</span></span>
<span class="line"><span style="color:#BABED8;">    start </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    t1 </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> Thread</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">count</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> args</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">**</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,))</span></span>
<span class="line"><span style="color:#BABED8;">    t2 </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> Thread</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">count</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> args</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">**</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,))</span></span>
<span class="line"><span style="color:#BABED8;">    t1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    t2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    t1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    t2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#82AAFF;">    print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Threads: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> -</span><span style="color:#82AAFF;"> start</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">    print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # 多进程（无GIL限制）</span></span>
<span class="line"><span style="color:#BABED8;">    start </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    p1 </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> Process</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">count</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> args</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">**</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,))</span></span>
<span class="line"><span style="color:#BABED8;">    p2 </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> Process</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">count</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> args</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">**</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,))</span></span>
<span class="line"><span style="color:#BABED8;">    p1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    p2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    p1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">    p2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#82AAFF;">    print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Process: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> -</span><span style="color:#82AAFF;"> start</span><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="_8-总结要点" tabindex="-1">8. 总结要点 <a class="header-anchor" href="#_8-总结要点" aria-label="Permalink to &quot;8. 总结要点&quot;">​</a></h2><p>GIL是CPython的历史选择，保障了简单性与线程安全。</p><p>影响多线程并行计算，但可通过多进程/异步/C扩展解决。</p><p>理解GIL有助于合理选择并发方案（I/O用线程/协程，CPU用进程）</p>`,24)]))}const A=n(o,[["render",e]]);export{y as __pageData,A as default};

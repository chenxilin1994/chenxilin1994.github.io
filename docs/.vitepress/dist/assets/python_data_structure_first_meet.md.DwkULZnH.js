import{_ as r,c as o,o as l,a2 as n}from"./chunks/framework.D30IVGRC.js";const _=JSON.parse('{"title":"初识数据结构与算法","description":"","frontmatter":{"layout":"doc","title":"初识数据结构与算法","editLink":true},"headers":[],"relativePath":"python/data_structure/first_meet.md","filePath":"python/data_structure/first_meet.md"}'),s={name:"python/data_structure/first_meet.md"};function i(a,t,e,g,u,d){return l(),o("div",null,t[0]||(t[0]=[n('<h1 id="初识数据结构与算法" tabindex="-1">初识数据结构与算法 <a class="header-anchor" href="#初识数据结构与算法" aria-label="Permalink to &quot;初识数据结构与算法&quot;">​</a></h1><ol><li><p><strong>算法（Algorithm）</strong><br> 算法是解决特定问题的一系列明确指令或操作步骤，其核心特性包括：</p><ul><li><strong>有限性</strong>：必须在有限时间内终止；</li><li><strong>确定性</strong>：每一步骤无歧义；</li><li><strong>输入与输出</strong>：接受输入并产生输出。<br> 例如，日常生活中的查字典行为对应<strong>二分查找算法</strong>，整理扑克牌类似<strong>插入排序算法</strong>，而货币找零则体现了<strong>贪心算法</strong>的设计思想。</li></ul></li><li><p><strong>数据结构（Data Structure）</strong><br> 数据结构是计算机中组织和存储数据的方式，旨在高效访问与修改数据。常见分类包括：</p><ul><li><strong>线性结构</strong>：数组、链表、栈、队列；</li><li><strong>非线性结构</strong>：树、图、堆；</li><li><strong>抽象数据类型</strong>：集合、哈希表。<br> 数据结构与算法的关系可类比为“积木与拼装步骤”——数据结构是积木的形态，算法是拼装方法。</li></ul></li></ol><h2 id="复杂度分析-评估算法效率的关键" tabindex="-1">复杂度分析：评估算法效率的关键 <a class="header-anchor" href="#复杂度分析-评估算法效率的关键" aria-label="Permalink to &quot;复杂度分析：评估算法效率的关键&quot;">​</a></h2><ol><li><p><strong>时间复杂度</strong><br> 描述算法运行时间随数据规模增长的趋势，而非具体时间。常见复杂度等级包括：</p><ul><li><strong>常数阶</strong> (O(1))：操作数与输入规模无关（如访问数组元素）；</li><li><strong>线性阶</strong> (O(n))：操作数与输入规模成正比（如遍历数组）；</li><li><strong>平方阶</strong> (O(n^2))：常见于嵌套循环（如冒泡排序）；</li><li><strong>指数阶</strong> (O(2^n))：多出现于递归问题（如斐波那契数列递归实现）。</li></ul></li><li><p><strong>空间复杂度</strong><br> 衡量算法运行过程中占用的内存空间，包括：</p><ul><li><strong>暂存空间</strong>：变量、函数调用栈帧；</li><li><strong>输出空间</strong>：结果存储需求。<br> 递归算法通常因栈帧累积导致更高的空间复杂度，而迭代算法（如循环）则更节省空间。</li></ul></li></ol><h2 id="算法设计思想与实现方式" tabindex="-1">算法设计思想与实现方式 <a class="header-anchor" href="#算法设计思想与实现方式" aria-label="Permalink to &quot;算法设计思想与实现方式&quot;">​</a></h2><ol><li><p><strong>迭代与递归</strong></p><ul><li><strong>迭代</strong>：通过循环重复执行任务，代码紧凑且内存占用低；</li><li><strong>递归</strong>：函数调用自身分解问题，需注意终止条件，普通递归因保留上下文可能产生高空间复杂度，而尾递归通过优化可减少开销。</li></ul></li><li><p><strong>分治与贪心</strong></p><ul><li><strong>分治</strong>：将问题拆解为子问题（如归并排序）；</li><li><strong>贪心</strong>：每一步选择局部最优解（如找零问题）。</li></ul></li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>数据结构与算法是计算机科学的基石，其设计需兼顾时间与空间效率。对于开发者而言，理解复杂度分析及常见算法思想（如分治、贪心），能显著提升解决实际问题的能力。</p>',8)]))}const c=r(s,[["render",i]]);export{_ as __pageData,c as default};

import{_ as c,C as i,c as F,o as n,a2 as l,b as e,w as a,a as o,G as t,a3 as r}from"./chunks/framework.D30IVGRC.js";const E=JSON.parse('{"title":"Python异步编程深度解析：从原理到实践","description":"","frontmatter":{"layout":"doc","title":"Python异步编程深度解析：从原理到实践","editLink":true},"headers":[],"relativePath":"python/basic/asyncio.md","filePath":"python/basic/asyncio.md"}'),y={name:"python/basic/asyncio.md"};function D(d,s,b,u,A,h){const p=i("Mermaid");return n(),F("div",null,[s[2]||(s[2]=l(`<h1 id="python异步编程全景指南" tabindex="-1">Python异步编程全景指南 <a class="header-anchor" href="#python异步编程全景指南" aria-label="Permalink to &quot;Python异步编程全景指南&quot;">​</a></h1><h2 id="第一章-理解程序世界的时空观" tabindex="-1">第一章：理解程序世界的时空观 <a class="header-anchor" href="#第一章-理解程序世界的时空观" aria-label="Permalink to &quot;第一章：理解程序世界的时空观&quot;">​</a></h2><h3 id="_1-1-同步-vs-异步-两种不同的时空维度" tabindex="-1">1.1 同步 vs 异步：两种不同的时空维度 <a class="header-anchor" href="#_1-1-同步-vs-异步-两种不同的时空维度" aria-label="Permalink to &quot;1.1 同步 vs 异步：两种不同的时空维度&quot;">​</a></h3><p><strong>同步编程</strong>就像单线程的流水线工人：</p><ul><li>必须严格按照顺序处理每个任务</li><li>遇到耗时操作（如网络请求）时完全停止</li><li>适合简单任务，但资源利用率低</li></ul><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#82AAFF;"> 同步任务</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#82AAFF;">    print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">开始下载A...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;">  # 模拟耗时操作</span></span>
<span class="line"><span style="color:#82AAFF;">    print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">开始下载B...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#82AAFF;">同步任务</span><span style="color:#89DDFF;">()</span><span style="color:#676E95;font-style:italic;">  # 总耗时5秒</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>异步编程</strong>则像经验丰富的餐厅经理：</p><ul><li>可以同时处理多个任务</li><li>遇到等待时切换处理其他任务</li><li>通过事件循环(event loop)调度任务</li><li>适合I/O密集型场景，资源利用率高</li></ul><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#C792EA;"> def</span><span style="color:#82AAFF;"> 异步任务</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#82AAFF;">    print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">开始下载A...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    await</span><span style="color:#BABED8;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;">  # 非阻塞等待</span></span>
<span class="line"><span style="color:#82AAFF;">    print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">开始下载B...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    await</span><span style="color:#BABED8;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">异步任务</span><span style="color:#89DDFF;">())</span><span style="color:#676E95;font-style:italic;">  # 总耗时5秒（但可并行处理其他任务）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_1-2-异步编程的三大核心要素" tabindex="-1">1.2 异步编程的三大核心要素 <a class="header-anchor" href="#_1-2-异步编程的三大核心要素" aria-label="Permalink to &quot;1.2 异步编程的三大核心要素&quot;">​</a></h3><ol><li><p><strong>协程(Coroutine)</strong>：</p><ul><li>使用<code>async def</code>定义的函数</li><li>可以被暂停和恢复的特殊函数</li><li>需要通过事件循环驱动执行</li></ul></li><li><p><strong>事件循环(Event Loop)</strong>：</p><ul><li>异步程序的中枢神经系统</li><li>负责调度和执行协程</li><li>监控I/O事件和系统事件</li></ul></li><li><p><strong>Future/Task</strong>：</p><ul><li>表示异步操作的执行状态</li><li>Task是Future的子类，用于包装协程</li><li>提供回调函数等高级功能</li></ul></li></ol><h2 id="第二章-协程的魔法原理" tabindex="-1">第二章：协程的魔法原理 <a class="header-anchor" href="#第二章-协程的魔法原理" aria-label="Permalink to &quot;第二章：协程的魔法原理&quot;">​</a></h2><h3 id="_2-1-协程的生命周期" tabindex="-1">2.1 协程的生命周期 <a class="header-anchor" href="#_2-1-协程的生命周期" aria-label="Permalink to &quot;2.1 协程的生命周期&quot;">​</a></h3>`,13)),(n(),e(r,null,{default:a(()=>[t(p,{id:"mermaid-133",class:"mermaid",graph:"stateDiagram-v2%0A%20%20%20%20%5B*%5D%20--%3E%20%E5%B7%B2%E5%88%9B%E5%BB%BA%0A%20%20%20%20%E5%B7%B2%E5%88%9B%E5%BB%BA%20--%3E%20%E6%8C%82%E8%B5%B7%3A%20%E9%81%87%E5%88%B0await%0A%20%20%20%20%E6%8C%82%E8%B5%B7%20--%3E%20%E8%BF%90%E8%A1%8C%3A%20%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%81%A2%E5%A4%8D%0A%20%20%20%20%E8%BF%90%E8%A1%8C%20--%3E%20%E5%AE%8C%E6%88%90%3A%20%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%0A%20%20%20%20%E6%8C%82%E8%B5%B7%20--%3E%20%E9%94%99%E8%AF%AF%3A%20%E5%8F%91%E7%94%9F%E5%BC%82%E5%B8%B8%0A%20%20%20%20%E9%94%99%E8%AF%AF%20--%3E%20%5B*%5D%0A%20%20%20%20%E5%AE%8C%E6%88%90%20--%3E%20%5B*%5D%0A"})]),fallback:a(()=>s[0]||(s[0]=[o(" Loading... ")])),_:1})),s[3]||(s[3]=l(`<h3 id="_2-2-await关键字的工作原理" tabindex="-1">2.2 await关键字的工作原理 <a class="header-anchor" href="#_2-2-await关键字的工作原理" aria-label="Permalink to &quot;2.2 await关键字的工作原理&quot;">​</a></h3><p>当协程执行到<code>await</code>表达式时：</p><ol><li>挂起当前协程</li><li>将控制权交还给事件循环</li><li>事件循环检查等待的条件是否满足</li><li>当条件满足时恢复协程执行</li></ol><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#C792EA;"> def</span><span style="color:#82AAFF;"> 示例协程</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#82AAFF;">    print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">步骤1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    await</span><span style="color:#BABED8;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;">  # 挂起点</span></span>
<span class="line"><span style="color:#82AAFF;">    print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">步骤2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;">  # 1秒后执行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 执行过程：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 1. 创建协程对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 2. 通过事件循环驱动执行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 3. 遇到await时挂起</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 4. 事件循环处理其他任务</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 5. 1秒后恢复执行</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="第三章-事件循环的调度艺术" tabindex="-1">第三章：事件循环的调度艺术 <a class="header-anchor" href="#第三章-事件循环的调度艺术" aria-label="Permalink to &quot;第三章：事件循环的调度艺术&quot;">​</a></h2><h3 id="_3-1-事件循环的运作机制" tabindex="-1">3.1 事件循环的运作机制 <a class="header-anchor" href="#_3-1-事件循环的运作机制" aria-label="Permalink to &quot;3.1 事件循环的运作机制&quot;">​</a></h3><p>事件循环的核心是一个无限循环，主要工作流程：</p><ol><li>从任务队列获取可执行任务</li><li>执行直到遇到await表达式</li><li>监控I/O操作和定时器</li><li>当条件满足时唤醒对应协程</li><li>重复上述过程</li></ol><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 手动创建事件循环（生产环境通常使用asyncio.run）</span></span>
<span class="line"><span style="color:#BABED8;">loop </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">new_event_loop</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    loop</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run_until_complete</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">主任务</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    loop</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-2-任务调度策略" tabindex="-1">3.2 任务调度策略 <a class="header-anchor" href="#_3-2-任务调度策略" aria-label="Permalink to &quot;3.2 任务调度策略&quot;">​</a></h3><p>事件循环使用多种队列管理任务：</p><ul><li><strong>Ready Queue</strong>：立即执行的任务</li><li><strong>Scheduled Queue</strong>：定时执行的任务</li><li><strong>I/O Queue</strong>：等待I/O完成的任务</li></ul><p>调度优先级：Ready Queue &gt; Scheduled Queue &gt; I/O Queue</p><h2 id="第四章-异步编程实践模式" tabindex="-1">第四章：异步编程实践模式 <a class="header-anchor" href="#第四章-异步编程实践模式" aria-label="Permalink to &quot;第四章：异步编程实践模式&quot;">​</a></h2><h3 id="_4-1-并发控制模式" tabindex="-1">4.1 并发控制模式 <a class="header-anchor" href="#_4-1-并发控制模式" aria-label="Permalink to &quot;4.1 并发控制模式&quot;">​</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#C792EA;"> def</span><span style="color:#82AAFF;"> 受限任务</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">semaphore</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> url</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    async</span><span style="color:#89DDFF;font-style:italic;"> with</span><span style="color:#BABED8;"> semaphore</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">  # 信号量控制并发数</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#82AAFF;"> fetch</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">url</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#C792EA;"> def</span><span style="color:#82AAFF;"> 批量下载</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#BABED8;">    sem </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Semaphore</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;">  # 最大并发5</span></span>
<span class="line"><span style="color:#BABED8;">    tasks </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> [</span><span style="color:#82AAFF;">受限任务</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sem</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> url</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;font-style:italic;"> for</span><span style="color:#BABED8;"> url </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#BABED8;"> url_list</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#BABED8;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">gather</span><span style="color:#89DDFF;">(*</span><span style="color:#82AAFF;">tasks</span><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_4-2-错误处理策略" tabindex="-1">4.2 错误处理策略 <a class="header-anchor" href="#_4-2-错误处理策略" aria-label="Permalink to &quot;4.2 错误处理策略&quot;">​</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#C792EA;"> def</span><span style="color:#82AAFF;"> 安全任务</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    try</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        result </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#82AAFF;"> 可能失败的操作</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    except</span><span style="color:#BABED8;"> NetworkError</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        result </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#82AAFF;"> 备用方案</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    finally</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        await</span><span style="color:#82AAFF;"> 清理资源</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">        </span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#C792EA;"> def</span><span style="color:#82AAFF;"> 超时控制</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    try</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        await</span><span style="color:#BABED8;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wait_for</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">网络请求</span><span style="color:#89DDFF;">(),</span><span style="color:#BABED8;font-style:italic;"> timeout</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    except</span><span style="color:#BABED8;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">TimeoutError</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#82AAFF;">        print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">请求超时</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="第五章-异步生态系统" tabindex="-1">第五章：异步生态系统 <a class="header-anchor" href="#第五章-异步生态系统" aria-label="Permalink to &quot;第五章：异步生态系统&quot;">​</a></h2><h3 id="_5-1-常用异步库" tabindex="-1">5.1 常用异步库 <a class="header-anchor" href="#_5-1-常用异步库" aria-label="Permalink to &quot;5.1 常用异步库&quot;">​</a></h3><table tabindex="0"><thead><tr><th>库名称</th><th>用途</th><th>同步库对应</th></tr></thead><tbody><tr><td>aiohttp</td><td>HTTP客户端/服务端</td><td>requests</td></tr><tr><td>aiomysql</td><td>MySQL数据库访问</td><td>pymysql</td></tr><tr><td>aiofiles</td><td>异步文件操作</td><td>open</td></tr><tr><td>websockets</td><td>WebSocket通信</td><td>wsgi</td></tr><tr><td>asyncpg</td><td>PostgreSQL访问</td><td>psycopg2</td></tr></tbody></table><h3 id="_5-2-异步web框架对比" tabindex="-1">5.2 异步Web框架对比 <a class="header-anchor" href="#_5-2-异步web框架对比" aria-label="Permalink to &quot;5.2 异步Web框架对比&quot;">​</a></h3><table tabindex="0"><thead><tr><th>框架</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td>FastAPI</td><td>基于类型提示，高性能</td><td>API服务</td></tr><tr><td>Sanic</td><td>类Flask语法，高并发</td><td>Web应用</td></tr><tr><td>Tornado</td><td>全栈式框架，历史悠久</td><td>长轮询/WebSocket</td></tr><tr><td>Quart</td><td>兼容Flask生态的异步框架</td><td>迁移项目</td></tr></tbody></table><h2 id="第六章-性能优化之道" tabindex="-1">第六章：性能优化之道 <a class="header-anchor" href="#第六章-性能优化之道" aria-label="Permalink to &quot;第六章：性能优化之道&quot;">​</a></h2><h3 id="_6-1-异步编程性能陷阱" tabindex="-1">6.1 异步编程性能陷阱 <a class="header-anchor" href="#_6-1-异步编程性能陷阱" aria-label="Permalink to &quot;6.1 异步编程性能陷阱&quot;">​</a></h3><ul><li><strong>阻塞调用</strong>：在协程中使用同步I/O</li><li><strong>过度并发</strong>：耗尽系统资源</li><li><strong>回调地狱</strong>：过度嵌套的回调函数</li><li><strong>内存泄漏</strong>：未正确取消任务</li></ul><h3 id="_6-2-调试与优化工具" tabindex="-1">6.2 调试与优化工具 <a class="header-anchor" href="#_6-2-调试与优化工具" aria-label="Permalink to &quot;6.2 调试与优化工具&quot;">​</a></h3><ol><li><p><strong>asyncio调试模式</strong>：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#BABED8;">asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">主任务</span><span style="color:#89DDFF;">(),</span><span style="color:#BABED8;font-style:italic;"> debug</span><span style="color:#89DDFF;">=True)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>性能分析工具</strong>：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> pyinstrument </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Profiler</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#C792EA;"> def</span><span style="color:#82AAFF;"> 性能测试</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    with</span><span style="color:#82AAFF;"> Profiler</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">async_mode</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">strict</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        await</span><span style="color:#82AAFF;"> 业务逻辑</span><span style="color:#89DDFF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><strong>监控指标</strong>：</p><ul><li>事件循环延迟</li><li>任务队列长度</li><li>协程切换频率</li></ul></li></ol><h2 id="第七章-从理论到实践" tabindex="-1">第七章：从理论到实践 <a class="header-anchor" href="#第七章-从理论到实践" aria-label="Permalink to &quot;第七章：从理论到实践&quot;">​</a></h2><h3 id="_7-1-异步爬虫实战" tabindex="-1">7.1 异步爬虫实战 <a class="header-anchor" href="#_7-1-异步爬虫实战" aria-label="Permalink to &quot;7.1 异步爬虫实战&quot;">​</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#C792EA;"> def</span><span style="color:#82AAFF;"> 异步爬虫</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">urls</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    async</span><span style="color:#89DDFF;font-style:italic;"> with</span><span style="color:#BABED8;"> aiohttp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ClientSession</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#BABED8;"> session</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        tasks </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> [</span><span style="color:#82AAFF;">获取页面</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">session</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> url</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;font-style:italic;"> for</span><span style="color:#BABED8;"> url </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#BABED8;"> urls</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#BABED8;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">gather</span><span style="color:#89DDFF;">(*</span><span style="color:#82AAFF;">tasks</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#C792EA;"> def</span><span style="color:#82AAFF;"> 获取页面</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">session</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> url</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    async</span><span style="color:#89DDFF;font-style:italic;"> with</span><span style="color:#BABED8;"> session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">url</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#BABED8;"> response</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#BABED8;"> response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">text</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 启动100个并发请求</span></span>
<span class="line"><span style="color:#BABED8;">results </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">异步爬虫</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">url_list</span><span style="color:#89DDFF;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_7-2-实时聊天服务" tabindex="-1">7.2 实时聊天服务 <a class="header-anchor" href="#_7-2-实时聊天服务" aria-label="Permalink to &quot;7.2 实时聊天服务&quot;">​</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> websockets </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> serve</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#C792EA;"> def</span><span style="color:#82AAFF;"> 聊天服务</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">websocket</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    async</span><span style="color:#89DDFF;font-style:italic;"> for</span><span style="color:#BABED8;"> message </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#BABED8;"> websocket</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        await</span><span style="color:#82AAFF;"> 广播消息</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">message</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#C792EA;"> def</span><span style="color:#82AAFF;"> 广播消息</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">message</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#BABED8;"> user </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#BABED8;"> 在线用户</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        await</span><span style="color:#BABED8;"> user</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">message</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#C792EA;"> def</span><span style="color:#82AAFF;"> 主程序</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    async</span><span style="color:#89DDFF;font-style:italic;"> with</span><span style="color:#82AAFF;"> serve</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">聊天服务</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">localhost</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 8765</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        await</span><span style="color:#BABED8;"> asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Future</span><span style="color:#89DDFF;">()</span><span style="color:#676E95;font-style:italic;">  # 永久运行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">主程序</span><span style="color:#89DDFF;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="知识图谱-异步编程核心概念" tabindex="-1">知识图谱：异步编程核心概念 <a class="header-anchor" href="#知识图谱-异步编程核心概念" aria-label="Permalink to &quot;知识图谱：异步编程核心概念&quot;">​</a></h2>`,34)),(n(),e(r,null,{default:a(()=>[t(p,{id:"mermaid-460",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%5D%20--%3E%20B%5B%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%5D%0A%20%20%20%20A%20--%3E%20C%5BI%2FO%E7%9B%91%E6%8E%A7%5D%0A%20%20%20%20B%20--%3E%20D%5B%E5%8D%8F%E7%A8%8B%E7%AE%A1%E7%90%86%5D%0A%20%20%20%20D%20--%3E%20E%5Bawait%E6%9C%BA%E5%88%B6%5D%0A%20%20%20%20C%20--%3E%20F%5B%E5%9B%9E%E8%B0%83%E8%A7%A6%E5%8F%91%5D%0A%20%20%20%20E%20--%3E%20G%5B%E5%BC%82%E6%AD%A5I%2FO%5D%0A%20%20%20%20F%20--%3E%20G%0A%20%20%20%20G%20--%3E%20H%5B%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B6%E5%8F%91%5D%0A"})]),fallback:a(()=>s[1]||(s[1]=[o(" Loading... ")])),_:1})),s[4]||(s[4]=l('<hr><h3 id="深度解析-异步编程的底层逻辑" tabindex="-1">深度解析：异步编程的底层逻辑 <a class="header-anchor" href="#深度解析-异步编程的底层逻辑" aria-label="Permalink to &quot;深度解析：异步编程的底层逻辑&quot;">​</a></h3><p><strong>1. 生成器与协程的关系</strong><br> Python协程基于生成器实现，通过<code>yield</code>和<code>send()</code>实现执行权的转移。async/await语法是生成器协程的语法糖，使得代码更易读。</p><p><strong>2. 事件循环的实现机制</strong><br> 主流事件循环使用Selector模块监控I/O事件：</p><ul><li>在Linux系统使用epoll</li><li>在macOS使用kqueue</li><li>在Windows使用IOCP</li></ul><p><strong>3. 协程与线程的对比</strong></p><table tabindex="0"><thead><tr><th>特性</th><th>协程</th><th>线程</th></tr></thead><tbody><tr><td>创建开销</td><td>极小（约1KB）</td><td>较大（约8MB）</td></tr><tr><td>切换成本</td><td>纳秒级</td><td>微秒级</td></tr><tr><td>并发数量</td><td>轻松支持数万</td><td>通常数百</td></tr><tr><td>数据共享</td><td>无需锁</td><td>需要同步机制</td></tr><tr><td>适用场景</td><td>I/O密集型</td><td>CPU密集型</td></tr></tbody></table><hr><h3 id="学习路线建议" tabindex="-1">学习路线建议 <a class="header-anchor" href="#学习路线建议" aria-label="Permalink to &quot;学习路线建议&quot;">​</a></h3><ol><li><p><strong>初级阶段</strong></p><ul><li>掌握async/await基本语法</li><li>理解事件循环原理</li><li>使用aiohttp进行网络请求</li></ul></li><li><p><strong>中级阶段</strong></p><ul><li>学习并发控制模式</li><li>掌握错误处理策略</li><li>熟悉常用异步库</li></ul></li><li><p><strong>高级阶段</strong></p><ul><li>优化异步程序性能</li><li>开发异步框架中间件</li><li>设计分布式异步系统</li></ul></li></ol>',10))])}const B=c(y,[["render",D]]);export{E as __pageData,B as default};
